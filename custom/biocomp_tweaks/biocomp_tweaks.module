<?php
// $Id$
/**
 * @file biocomp_tweaks.module
 * TODO: Enter file description here.
 */

/**
* Telling the date api to inlcude the node_marcomms_ticket to be
* inluded in the date arguments
*/
function biocomp_tweaks_date_api_tables() {
    return array('feeds_data_results_school');
}

/**
* Implementation of hook_date_api_fields().
* on behalf of core fields.
*
* All modules that create custom fields that use the
* 'views_handler_field_date' handler can provide
* additional information here about the type of
* date they create so the date can be used by
* the Date API views date argument and date filter.
*/
function biocomp_tweaks_date_api_fields($field) {
  $values = array(
    // The type of date: DATE_UNIX, DATE_ISO, DATE_DATETIME.
    'sql_type' => DATE_UNIX,
    // Timezone handling options: 'none', 'site', 'date', 'utc'.
    'tz_handling' => 'site',
    // Needed only for dates that use 'date' tz_handling.
    'timezone_field' => '',
    // Needed only for dates that use 'date' tz_handling.
    'offset_field' => '',
    // Array of "table.field" values for related fields that should be
    // loaded automatically in the Views SQL.
    'related_fields' => array(),
    // Granularity of this date field's db data.
    'granularity' => array('year'),
  );

  switch ($field) {
    case 'feeds_data_results_school.timestamp':
    return $values;
  }
}

/**
 * Invoked after a feed source has been parsed, before it will be processed.
 * 
 * @param $importer
 *   FeedsImporter object that has been used for importing the feed.
 * @param $source
 *  FeedsSource object that describes the source that has been imported.
 */
function biocomp_tweaks_feeds_after_parse(FeedsImporter $importer, FeedsSource $source) {
  switch ($importer->id) {
    case 'results_school':

      // Build an array of all school account usernames (school codes) keyed to account uid.
      $sql = "SELECT users.name, users.uid FROM {users} INNER JOIN {users_roles} ON users.uid = users_roles.uid WHERE users_roles.rid = 3";
      $result = db_query($sql);
      while ($user = db_fetch_object($result)) {
        $all_users[$user->uid] = $user->name;
      }

      foreach ($source->batch->items as $n => $import_row) {

        // ##### Convert year YYYY to UNIX time. (arbitrarily May YYYY) #####
        $source->batch->items[$n][6] = strtotime('May ' . $import_row[6]);

        // ##### Convert school code to uid #####
        $uid = array_search($import_row[0], $all_users);
        // Unset row and print message if no school code match.
        if (!$uid) {
          $text = 'The result row for school code %school_code in the imported file does not correspond to a school account in the system.';
          $text .= ' Please be sure that a school account exists with this school code as a username.';
          $msg = t($text, array('%school_code' => $import_row[0]));
          drupal_set_message($msg, 'error');
          unset($source->batch->items[$n]);
        } else {
          $source->batch->items[$n][0] = $uid;
        }
      }
      break;

    case 'importer_schools':

      break;

    case 'importer_schools_profiles':

      // Build an array of all school account usernames (school codes) keyed to account uid.
      $sql = "SELECT users.name, users.uid FROM {users} INNER JOIN {users_roles} ON users.uid = users_roles.uid WHERE users_roles.rid = 3";
      $result = db_query($sql);
      while ($user = db_fetch_object($result)) {
        $all_users[$user->uid] = $user->name;
      }

      foreach ($source->batch->items as $n => $import_row) {

        // ##### Convert school code to uid #####
        $uid = array_search($import_row[0], $all_users);
        // Unset row and print message if no school code match.
        if (!$uid) {
          $text = 'The result row for school code %school_code in the imported file does not correspond to a school account in the system.';
          $text .= ' Please be sure that a school account exists with this school code as a username.';
          $msg = t($text, array('%school_code' => $import_row[0]));
          drupal_set_message($msg, 'error');
          unset($source->batch->items[$n]);
        } else {
          $source->batch->items[$n][0] = $uid;
        }
      }
      break;


  }
}
